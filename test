#!/bin/bash

# Test script code thanks to coreos/etcd
#
# Run all etcd tests
# ./test
# ./test -v
#
# Run tests for one package
#
# PKG=./wal ./test
# PKG=snap ./test
#
# Run also integration tests
# INTEGRATION=1 ./test
#
set -e

BASEDIR=$(readlink -f $(dirname $0))
BINDIR=${BASEDIR}/bin

if [ $PWD != $BASEDIR ]; then
	cd $BASEDIR
fi

source ./build

TESTABLE="cmd/keeper cmd/sentinel cmd/proxy pkg/cluster pkg/store pkg/flagutil pkg/kubernetes pkg/postgresql pkg/util"

# user has not provided PKG override
if [ -z "$PKG" ]; then
	TEST=$TESTABLE
	FMT=$TESTABLE

# user has provided PKG override
else
	# strip out leading dotslashes and trailing slashes from PKG=./foo/
	TEST=${PKG/#./}
	TEST=${TEST/#\//}
	TEST=${TEST/%\//}

	FMT=$TEST
fi

# split TEST into an array and prepend REPO_PATH to each local package
split=(${TEST// / })
TEST=${split[@]/#/${REPO_PATH}/}
split=(${NO_RACE_TEST// / })
NO_RACE_TEST=${split[@]/#/${REPO_PATH}/}

echo "Running tests..."

# Invoke ./cover for HTML output
COVER=${COVER:-"-cover"}

echo "Checking gofmt..."
fmtRes=$(gofmt -l $FMT)
if [ -n "${fmtRes}" ]; then
	echo -e "gofmt checking failed:\n${fmtRes}"
	exit 255
fi

echo "Checking govet..."
vetRes=$(go vet $TEST)
if [ -n "${vetRes}" ]; then
	echo -e "govet checking failed:\n${vetRes}"
	exit 255
fi

echo "Checking govet -shadow ..."
for path in $FMT; do
	vetRes=$(go tool vet -shadow ${path})
	if [ -n "${vetRes}" ]; then
		echo -e "govet checking ${path} failed:\n${vetRes}"
		exit 255
	fi
done

echo "Checking for license header..."
licRes=$(for file in $(find . -type f -iname '*.go' ! -path './vendor/*'); do
		head -n3 "${file}" | grep -Eq "(Copyright|generated|GENERATED)" || echo -e "  ${file}"
	done;)
if [ -n "${licRes}" ]; then
	echo -e "license header checking failed:\n${licRes}"
	exit 255
fi

go test -timeout 3m ${COVER} $@ ${TEST} ${RACE}

if [ -n "$INTEGRATION" ]; then
	echo "Running integration tests..."
	if [ -z ${STOLON_TEST_STORE_BACKEND} ]; then
		echo "STOLON_TEST_STORE_BACKEND env var needs to be defined (etcd or consul)"
		exit 1
	fi
	export STKEEPER_BIN=${BINDIR}/stolon-keeper
	export STSENTINEL_BIN=${BINDIR}/stolon-sentinel
	export STPROXY_BIN=${BINDIR}/stolon-proxy
	if [ "${STOLON_TEST_STORE_BACKEND}" == "etcd" ]; then
		if [ -z ${ETCD_BIN} ]; then
			if [ -z $(which etcd) ]; then
				echo "cannot find etcd in PATH and ETCD_BIN environment variable not defined"
				exit 1
			fi
			ETCD_BIN=$(which etcd)
		fi
		echo "using etcd from $ETCD_BIN"
		export ETCD_BIN
	elif [ "${STOLON_TEST_STORE_BACKEND}" == "consul" ]; then
		if [ -z ${CONSUL_BIN} ]; then
			if [ -z $(which consul) ]; then
				echo "cannot find consul in PATH and CONSUL_BIN environment variable not defined"
				exit 1
			fi
			CONSUL_BIN=$(which consul)
		fi
		echo "using consul from $CONSUL_BIN"
		export CONSUL_BIN
	else
		echo "Unknown store backend: \"${STOLON_TEST_STORE_BACKEND}\""
		exit 1
	fi

	[ -z "$PARALLEL" ] && PARALLEL=4
	go test -timeout 20m $@ -v -parallel ${PARALLEL} ${REPO_PATH}/tests/integration
fi

echo "Success"
